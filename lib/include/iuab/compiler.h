#ifndef IUAB_COMPILER_H
#define IUAB_COMPILER_H

#ifdef __cplusplus
extern "C" {
#endif

#include "buffer.h"
#include "errors.h"
#include "lexer.h"
#include "op.h"

#define IUAB_COMPILER_STACK_DEPTH (1U << 8U)

/* A compiler for "I use Arch btw" source files. */
struct iuab_compiler {
    struct iuab_lexer *lexer; /* The lexer used for getting tokens. */
    struct iuab_token token; /* The current token. */
    struct iuab_buffer *output; /* The generated bytecode. */
    size_t stack[IUAB_COMPILER_STACK_DEPTH]; /* The loop stack. */
    size_t depth; /* The current loop nesting depth. */
    enum iuab_error error; /* The current error. */
};

/* Initializes the given compiler to take the given input file. */
enum iuab_error iuab_compiler_init(struct iuab_compiler *comp, FILE *input);

/* Runs the given compiler and outputs the generated bytecode in dest. Returns
 * the compiler's error code. After calling this function, dest will point to
 * dynamically allocated memory which should be manually free()'d. */
enum iuab_error iuab_compiler_run(struct iuab_compiler *comp, uint8_t **dest);

/* Cleans up the given compiler. */
void iuab_compiler_fini(struct iuab_compiler *comp);

#ifdef __cplusplus
}
#endif

#endif /* IUAB_COMPILER_H */
